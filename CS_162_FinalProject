import tkinter as tk
from tkinter import messagebox
import unittest

# Class representing an item in the game
class Item:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

# Subclass of Item, representing a key
class Key(Item):
    def __init__(self):
        super().__init__("Key")

# Subclass of Item, representing a door
class Door(Item):
    def __init__(self):
        super().__init__("Door")
        self.locked = True

    def unlock(self):
        self.locked = False

# Class representing a player in the game
class Player:
    def __init__(self, name):
        self.set_name(name)
        self.inventory = []

    # Set the name of the player, ensuring it is not empty
    def set_name(self, name):
        if not name.strip():
            raise ValueError("Player name cannot be empty.")
        self.name = name

    # Player grabs an item and adds it to the inventory
    def grab_item(self, item):
        print(f"{self.name} grabbed a {item}!")
        self.inventory.append(item)

    # Player uses a key to unlock a door, displays Fibonacci series, and saves it to a file
    def use_key(self, door):
        if any(isinstance(item, Key) for item in self.inventory):
            print(f"{self.name} unlocked the {door}!")
            door.unlock()
            messagebox.showinfo("Success", f"{self.name} unlocked the {door}!")

            # Add Fibonacci code using recursion
            fibonacci_series = self.generate_fibonacci_series(10)  # Change the number of terms as needed
            print("Fibonacci Series:", fibonacci_series)

            # Save Fibonacci series to a file
            self.save_to_file("fibonacci_series.txt", fibonacci_series)
        else:
            print(f"{self.name} doesn't have a key!")
            messagebox.showwarning("No Key", f"{self.name} doesn't have a key!")

    # Generate Fibonacci series using recursion
    def generate_fibonacci_series(self, n):
        if n <= 0:
            return []
        elif n == 1:
            return [0]
        elif n == 2:
            return [0, 1]
        else:
            fib_series = self.generate_fibonacci_series(n - 1)
            fib_series.append(fib_series[-1] + fib_series[-2])
            return fib_series

    # Save a list of data to a file
    def save_to_file(self, filename, data):
        with open(filename, 'w') as file:
            for item in data:
                file.write(f"{item}\n")

# Class representing the game
class Game:
    def __init__(self, root):
        self.player = None
        self.door = None
        self.root = root

    # Start the game, initializing player and door, and creating the GUI
    def start(self):
        player_name = self.get_valid_player_name()
        self.player = Player(player_name)
        self.door = Door()
        self.create_gui()
        self.root.mainloop()

    # Get a valid player name from user input
    def get_valid_player_name(self):
        while True:
            player_name = input("Enter player name: ").strip()
            if player_name:
                return player_name
            else:
                print("Player name cannot be empty. Please try again.")

    # Create the graphical user interface (GUI) for the game
    def create_gui(self):
        self.root.title("Unlock the Door")

        label = tk.Label(self.root, text="Options:")
        label.pack()

        button_grab_key = tk.Button(self.root, text="Grab Key", command=self.grab_key)
        button_grab_key.pack()

        button_use_key = tk.Button(self.root, text="Use Key to Unlock Door", command=self.use_key)
        button_use_key.pack()

        button_save_to_file = tk.Button(self.root, text="Save Fibonacci to File", command=self.save_to_file)
        button_save_to_file.pack()

    # Player grabs a key
    def grab_key(self):
        self.player.grab_item(Key())

    # Player uses a key to unlock a door
    def use_key(self):
        try:
            self.player.use_key(self.door)
            if not self.door.locked:
                self.root.destroy()
        except ValueError as e:
            messagebox.showerror("Error", str(e))

    # Save a sample data to the file (can be modified as needed)
    def save_to_file(self):
        data_to_save = [1, 1, 2, 3, 5, 8, 13, 21]
        self.player.save_to_file("sample_data.txt", data_to_save)

# Unit tests for Player class
class TestPlayerMethods(unittest.TestCase):
    def setUp(self):
        self.player = Player("TestPlayer")
        self.door = Door()

    # Test setting a valid player name
    def test_set_valid_name(self):
        self.player.set_name("ValidName")
        self.assertEqual(self.player.name, "ValidName")

    # Test setting an empty player name
    def test_set_empty_name(self):
        with self.assertRaises(ValueError):
            self.player.set_name("")

    # Test setting a player name with whitespace only
    def test_set_whitespace_name(self):
        with self.assertRaises(ValueError):
            self.player.set_name("   ")

    # ... (other test cases)

if __name__ == "__main__":
    # Run the tests
    # unittest.main()

    # Run the game with GUI
    root = tk.Tk()
    game = Game(root)
    game.start()
